#+title: README
#+author: Vedant Pandey

* What is this
  I've created this hobby project to attempt to create a mock stock exchange to understand and build deeper understanding of how exchanges work

* Goals

** InProgress Web client to serve the scrip information

*** Http server

*** Reverse proxy

*** Containerization for local e2e testing
 
** Todo Backend process to generate scrip data

** Todo Use seed based random data generation

** Todo Simulation testing

** Todo Benchmarking

** Unplanned Build simulated dependence on scrips

** Unplanned User interaction for buy/sell transaction

* Components

** Order Matching Engine
*** Functional Requirements:
*** Functional Requirements:
- Support for limit, market, IOC (Immediate-or-Cancel), and FOK (Fill-or-Kill) orders
- Price-time priority matching algorithm
- Support for order cancellation and modification
- Handling of partial fills and order book management
- Support for multiple securities/trading pairs
- Auction modes (opening/closing)
- Circuit breaker functionality for volatility control
- Trade execution reports generation

*** Non-Functional Requirements:
- Sub-microsecond matching latency for individual orders
- Throughput of at least 100,000 messages per second
- Deterministic behavior with minimal jitter
- Memory usage optimization (pre-allocated buffers)
- Zero garbage collection pauses during critical operations
- Extensive unit testing with >95% code coverage
- Stress testing under various market conditions
- Log-based audit trail for all operations

** Market Data Handler
*** Functional Requirements:
- Parse and normalize market data from multiple formats (CSV, FIX, proprietary)
- Support for Level 1 (top of book) and Level 2 (order book depth) data
- Real-time updates with minimal transformation delay
- Historical data storage and retrieval
- Generation of derived data (VWAP, moving averages, etc.)
- Support for market data snapshots and incremental updates
- Filtering capabilities by symbol, type, or other criteria

*** Non-Functional Requirements:
- Handle 1+ million market data messages per second
- Data normalization latency under 100 microseconds
- Efficient memory usage for high-volume data streams
- Fault tolerance with automatic recovery
- Configurable throttling mechanisms
- Performance metrics collection and monitoring
- Cache optimization for frequently accessed data
- Low CPU utilization under normal load conditions

** Trading Protocol Implementation
*** Functional Requirements:
- Implementation of FIX protocol (4.2/4.4/5.0)
- Session management (logon, heartbeat, logout)
- Order entry, modification, and cancellation
- Trade confirmation handling
- Market data subscription and distribution
- Support for administrative messages
- Sequence number tracking and gap recovery
- Message validation and error handling

*** Non-Functional Requirements:
- Connection handling for 1000+ simultaneous clients
- Message processing latency under 50 microseconds
- Efficient binary encoding/decoding
- Robust error recovery mechanisms
- Session state persistence
- Configurable message validation rules
- Secure communication (TLS support)
- Comprehensive logging for troubleshooting

** Strategy Backtesting Framework
*** Functional Requirements:
- Historical data loading and preprocessing
- Realistic order execution simulation
- P&L calculation and performance metrics
- Transaction cost modeling (fees, slippage)
- Support for custom strategy implementation
- Event-driven architecture for strategy execution
- Multiple timeframe analysis
- Reporting and visualization capabilities

*** Non-Functional Requirements:
- Process 10+ years of market data efficiently
- Parallelizable backtesting for multiple instruments
- Parameter optimization capabilities
- Deterministic results for repeated runs
- Low memory footprint for large datasets
- Extensible plugin architecture
- Comprehensive documentation for API usage
- Export results in standard formats (CSV, JSON)

** Optimized Data Structures
*** Functional Requirements:
- Lock-free queue implementation for message passing
- High-performance order book data structure
- Specialized hash maps for quick symbol lookup
- Memory-efficient string handling
- Timestamp management with nanosecond precision
- Ring buffers for circular data storage
- Specialized containers for time series data
- Priority queues for order management

*** Non-Functional Requirements:
- Benchmarks showing 50%+ performance improvement over standard libraries
- Thread-safety with minimal contention
- Cache-friendly memory layout
- Minimal memory allocation during operation
- Comprehensive unit tests with edge cases
- Stress testing under high concurrency
- Clear documentation of algorithmic complexity
- No external dependencies

** Core Exchange System (Integration)
*** Functional Requirements:
- Component discovery and initialization
- Configuration management across all subsystems
- Centralized logging and monitoring
- System health checks and diagnostics
- Graceful startup and shutdown sequences
- Administrative API for system management
- Trading session management (pre-market, regular, post-market)
- Disaster recovery procedures

*** Non-Functional Requirements:
- Sub-millisecond end-to-end latency for complete transaction flow
- 99.999% uptime design goal
- Horizontal scalability for increased load
- Comprehensive metrics collection and visualization
- Automated integration testing between components
- Performance regression testing framework
- Documentation of system architecture and interactions
- Compliance with relevant financial system standards
